cmake_minimum_required(VERSION 3.23)
set(CMAKE_VERBOSE_MAKEFILE ON)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(VCPKG_CRT_LINKAGE dynamic)
set(VCPKG_LIBRARY_LINKAGE static)
set(CMAKE_CROSSCOMPILING "TRUE")
OPTION(BUILD_32 "Build for 32 bit" OFF)

if(VCPKG_TARGET_ANDROID)
    message(STATUS "Set up Android build variable")
    set(CMAKE_THREAD_LIBS_INIT "-pthread")
    set(CMAKE_HAVE_THREADS_LIBRARY 1)
    set(CMAKE_USE_WIN32_THREADS_INIT 0)
    set(CMAKE_USE_PTHREADS_INIT 1)
    set(THREADS_PREFER_PTHREAD_FLAG ON)
    set(VCPKG_TARGET_ANDROID ON)
    set(CMAKE_ANDROID_STL_TYPE "c++_static")
    set(CMAKE_CXX20_EXTENSION_COMPILE_OPTION "-std=c++20")
else()
    set(CMAKE_CXX_FLAGS "-std=c++20")
endif()

project(WebScrapperGenshinCharacterCard LANGUAGES CXX)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ../WebScrapperGenshinCharacterCard/)
add_executable(WebScrapperGenshinCharacterCard WebScrapperGenshinCharacterCard.cpp)

if(CMAKE_SYSTEM_NAME STREQUAL Windows)
    message(STATUS "Building for Windows")
    target_link_libraries(${PROJECT_NAME} PUBLIC stdc++fs)
    if(NOT BUILD_32)
        if(VCPKG_TARGET_ARCHITECTURE STREQUAL arm64)
            message(STATUS "Building for arm64")
            set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_windows_arm64")
        elseif(VCPKG_TARGET_ARCHITECTURE STREQUAL x64)
            message(STATUS "Building for x64")
            set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_windows_x64")
        else()
            message(STATUS "Building for generic x64")
            set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_windows_generic64")
        endif()
    elseif(BUILD_32)
        if(VCPKG_TARGET_ARCHITECTURE STREQUAL arm)
            message(STATUS "Building for arm32")
            set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_windows_arm32")
        elseif(VCPKG_TARGET_ARCHITECTURE STREQUAL x86)
            message(STATUS "Building for x86")
            set(VCPKG_TARGET_ARCHITECTURE x86)
            set(VCPKG_TARGET_TRIPLET "x86-linux" CACHE STRING "")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32")
            set(CMAKE_CXX_COMPILER_TARGET i686)
            set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -m32")
            set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_windows_x86")
        else()
            message(STATUS "Building for generic x86")
            set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_windows_generic86")
        endif()
    endif()   
elseif(CMAKE_SYSTEM_NAME STREQUAL Linux)
    message(STATUS "Building for Linux")
    target_link_libraries(${PROJECT_NAME} PUBLIC stdc++fs)
    if(NOT BUILD_32)
        if(VCPKG_TARGET_ARCHITECTURE STREQUAL arm64)
            message(STATUS "Building for arm64")
            set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_linux_arm64")
        elseif(VCPKG_TARGET_ARCHITECTURE STREQUAL x64)
            message(STATUS "Building for x64")
            set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_linux_x64")
        else()
            message(STATUS "Building for generic x64")
            set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_linux_generic64")
        endif()
    elseif(BUILD_32)
        if(VCPKG_TARGET_ARCHITECTURE STREQUAL arm32)
            message(STATUS "Building for arm32")
            set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_linux_arm32")
        elseif(VCPKG_TARGET_ARCHITECTURE STREQUAL x86)
            message(STATUS "Building for x86")
            set(VCPKG_TARGET_ARCHITECTURE x86)
            set(VCPKG_TARGET_TRIPLET "x86-windows" CACHE STRING "")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32")
            set(CMAKE_CXX_COMPILER_TARGET i686)
            set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -m32")
            set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_linux_x86")
        else()
            message(STATUS "Building for generic x86")
            set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_linux_generic86")
        endif()
    endif()
elseif(CMAKE_SYSTEM_NAME STREQUAL Android)
    message(STATUS "Building for Android")
    if(VCPKG_TARGET_TRIPLET STREQUAL x64)
        set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_android_x64")
    elseif(VCPKG_TARGET_TRIPLET STREQUAL x86)
        set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_android_x32")
    elseif(VCPKG_TARGET_TRIPLET STREQUAL arm64)
        set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_android_arm64")
    elseif(VCPKG_TARGET_TRIPLET STREQUAL arm32)
        set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_android_arm32")
    else()
        set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_android_generic")
    endif()
elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin)
    message(STATUS "Building for Darwin / macOS")
    target_link_libraries(${PROJECT_NAME} PUBLIC stdc++fs)
    if(NOT BUILD_32)
        if(VCPKG_TARGET_ARCHITECTURE STREQUAL arm64 OR VCPKG_TARGET_ARCHITECTURE STREQUAL aarch64)
            message(STATUS "Building for arm64")
            set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_darwin_arm64")
        elseif(VCPKG_TARGET_ARCHITECTURE STREQUAL AMD64 OR VCPKG_TARGET_ARCHITECTURE STREQUAL x86_64)
            message(STATUS "Building for x64")
            set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_darwin_x64")
        else()
            message(STATUS "Building for generic x64")
            set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_darwin_generic64")
        endif()
    elseif(BUILD_32)
        if(VCPKG_TARGET_ARCHITECTURE STREQUAL arm32 OR VCPKG_TARGET_ARCHITECTURE STREQUAL aarch32)
            message(STATUS "Building for arm32")
            set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_darwin_arm32")
        elseif(VCPKG_TARGET_ARCHITECTURE STREQUAL x86 OR VCPKG_TARGET_ARCHITECTURE STREQUAL x86_32)
            message(STATUS "Building for x86")
            set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_darwin_x86")
        else()
            message(STATUS "Building for generic x64")
            set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_darwin_generic86")
        endif()
    endif()
elseif(CMAKE_SYSTEM_NAME STREQUAL FreeBSD)
    message(STATUS "Building for FreeBSD")
    target_link_libraries(${PROJECT_NAME} PUBLIC stdc++fs)
    if(NOT BUILD_32)
        if(VCPKG_TARGET_ARCHITECTURE STREQUAL arm64 OR VCPKG_TARGET_ARCHITECTURE STREQUAL aarch64)
            message(STATUS "Building for arm64")
            set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_FreeBSD_arm64")
        elseif(VCPKG_TARGET_ARCHITECTURE STREQUAL AMD64 OR VCPKG_TARGET_ARCHITECTURE STREQUAL x86_64)
            message(STATUS "Building for x64")
            set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_FreeBSD_x64")
        else()
            message(STATUS "Building for generic x64")
            set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_FreeBSD_generic64")
        endif()
    elseif(BUILD_32)
        if(VCPKG_TARGET_ARCHITECTURE STREQUAL arm32 OR VCPKG_TARGET_ARCHITECTURE STREQUAL aarch32)
            message(STATUS "Building for arm32")
            set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_FreeBSD_arm32")
        elseif(VCPKG_TARGET_ARCHITECTURE STREQUAL x86 OR VCPKG_TARGET_ARCHITECTURE STREQUAL x86_32)
            message(STATUS "Building for x86")
            set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_FreeBSD_x86")
        else()
            message(STATUS "Building for generic x64")
            set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_FreeBSD_generic86")
        endif()
    endif()     
else()
    message(STATUS "Building for Generic / Other Arch")
    target_link_libraries(${PROJECT_NAME} PUBLIC stdc++fs)
    if(NOT BUILD_32)
        if(VCPKG_TARGET_ARCHITECTURE STREQUAL arm64 OR VCPKG_TARGET_ARCHITECTURE STREQUAL aarch64)
            message(STATUS "Building for arm64")
            set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_other_arm64")
        elseif(VCPKG_TARGET_ARCHITECTURE STREQUAL AMD64 OR VCPKG_TARGET_ARCHITECTURE STREQUAL x86_64)
            message(STATUS "Building for x64")
            set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_other_x64")
        else()
            message(STATUS "Building for generic x64")
            set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_other_generic64")
        endif()
    elseif(BUILD_32)
        if(VCPKG_TARGET_ARCHITECTURE STREQUAL arm32 OR VCPKG_TARGET_ARCHITECTURE STREQUAL aarch32)
            message(STATUS "Building for arm32")
            set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_other_arm32")
        elseif(VCPKG_TARGET_ARCHITECTURE STREQUAL x86 OR VCPKG_TARGET_ARCHITECTURE STREQUAL x86_32)
            message(STATUS "Building for x86")
            set(VCPKG_TARGET_ARCHITECTURE x86)
            set(VCPKG_TARGET_TRIPLET "x86" CACHE STRING "")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32")
            set(CMAKE_CXX_COMPILER_TARGET i686)
            set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -m32")
            set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_other_x86")
        else()
            message(STATUS "Building for generic x64")
            set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_other_generic86")
        endif()
    endif()
endif()

find_package(cpr REQUIRED)
target_link_libraries(${PROJECT_NAME} PUBLIC cpr::cpr)

find_package(CURL REQUIRED)
target_link_libraries(${PROJECT_NAME} PUBLIC CURL::libcurl)

find_package(unofficial-gumbo REQUIRED)
target_link_libraries(${PROJECT_NAME} PUBLIC unofficial::gumbo::gumbo)

find_package(indicators REQUIRED)
target_link_libraries(${PROJECT_NAME} PUBLIC indicators::indicators)

find_package(argparse REQUIRED)
target_link_libraries(${PROJECT_NAME} PUBLIC argparse::argparse)

find_path(TERMCOLOR_INCLUDE_DIRS "termcolor/termcolor.hpp")
target_include_directories(${PROJECT_NAME} PUBLIC ${TERMCOLOR_INCLUDE_DIRS})
