cmake_minimum_required(VERSION 3.23)
set(CMAKE_VERBOSE_MAKEFILE ON)
project(WebScrapperGenshinCharacterCard LANGUAGES CXX)
set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CROSSCOMPILING "TRUE")

if(VCPKG_TARGET_ANDROID)
    message(STATUS "Set up Android build variable")
    set(CMAKE_THREAD_LIBS_INIT "-pthread")
    set(CMAKE_HAVE_THREADS_LIBRARY 1)
    set(CMAKE_USE_WIN32_THREADS_INIT 0)
    set(CMAKE_USE_PTHREADS_INIT 1)
    set(THREADS_PREFER_PTHREAD_FLAG ON)
    set(VCPKG_TARGET_ANDROID ON)
    set(CMAKE_ANDROID_STL_TYPE c++_static)
    set(CMAKE_CXX20_EXTENSION_COMPILE_OPTION "-std=c++23")
else()
    set(CMAKE_CXX_FLAGS "-lstdc++fs -std=c++23")
endif()

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ../WebScrapperGenshinCharacterCard/)
add_executable(WebScrapperGenshinCharacterCard WebScrapperGenshinCharacterCard.cpp)

if(CMAKE_SYSTEM_NAME STREQUAL Windows)
    message(STATUS "Building for Windows")
    target_link_libraries(${PROJECT_NAME} PRIVATE stdc++fs)
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
        message(STATUS "Building for x64")
        set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_windows_x64")
    elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
        message(STATUS "Building for x86")
        target_compile_options(${PROJECT_NAME} PRIVATE -m32)
        set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_windows_x32")
    else()
        set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_windows_generic")
    endif()    
elseif(CMAKE_SYSTEM_NAME STREQUAL Linux)
    message(STATUS "Building for Linux")
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
        message(STATUS "Building for x64")
        set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_linux_x64")
    elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
        message(STATUS "Building for x86")
        target_compile_options(${PROJECT_NAME} PRIVATE -m32)
        set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_linux_x32")
    else()
        set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_linux_generic")
    endif()    
elseif(CMAKE_SYSTEM_NAME STREQUAL Android)
    message(STATUS "Building for Android")
    if(CMAKE_SYSTEM_PROCESSOR STREQUAL AMD64 OR CMAKE_SYSTEM_PROCESSOR STREQUAL x86_64)
        set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_android_x64")
    elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL x86 OR CMAKE_SYSTEM_PROCESSOR STREQUAL x86_32)
        set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_android_x32")
    elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL ARM64 OR CMAKE_SYSTEM_PROCESSOR STREQUAL aarch64)
        set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_android_arm64")
    elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL ARM32 OR CMAKE_SYSTEM_PROCESSOR STREQUAL aarch32)
        set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_android_arm32")
    else()
        set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_android_generic")
    endif()
elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin)
    message(STATUS "Building for Darwin / macOS")
    target_link_libraries(${PROJECT_NAME} PRIVATE stdc++fs)
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
        message(STATUS "Building for x64")
        set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_darwin_x64")
    elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
        message(STATUS "Building for x86")
        target_compile_options(${PROJECT_NAME} PRIVATE -m32)
        set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_darwin_x32")
    else()
        set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_darwin_generic")
    endif()    
else()
    message(STATUS "Building for Generic / Other Arch")
    target_link_libraries(${PROJECT_NAME} PRIVATE stdc++fs)
    set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "wsgcc_generic")
endif()

find_package(cpr CONFIG REQUIRED)
target_link_libraries(${PROJECT_NAME} PRIVATE cpr::cpr)

find_package(CURL CONFIG REQUIRED)
target_link_libraries(${PROJECT_NAME} PRIVATE CURL::libcurl)

find_package(unofficial-gumbo CONFIG REQUIRED)
target_link_libraries(${PROJECT_NAME} PRIVATE unofficial::gumbo::gumbo)

find_package(indicators CONFIG REQUIRED)
target_link_libraries(${PROJECT_NAME} PRIVATE indicators::indicators)

find_package(argparse CONFIG REQUIRED)
target_link_libraries(${PROJECT_NAME} PRIVATE argparse::argparse)

find_path(TERMCOLOR_INCLUDE_DIRS "termcolor/termcolor.hpp")
target_include_directories(${PROJECT_NAME} PRIVATE ${TERMCOLOR_INCLUDE_DIRS})